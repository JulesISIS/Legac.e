# Configuration du login / password de l'administrateur
admin.login=Legace
admin.password=TestamentHair1
admin.email=legac.e@gmail.com
admin.telephone=0614732861
admin.nom=Rogers
admin.prenom=Nelson
admin.prenom2=Lloyd
admin.prenom3=Red
admin.sexe=1
admin.code_postal=73640
admin.commune_naiss=Sainte-Foy-Tarentaise
admin.proche=Jules
admin.email_proche=m.jules.claudel@gmail.com
admin.proche2=Baptiste
admin.email_proche2=baptiste.villedieu2000@gmail.com
admin.date_naiss=1999-11-03


# Acc\u00c3\u00a8s aux fournisseurs de login social
# facebook
spring.social.facebook.appId=[Facebook app ID]
spring.social.facebook.appSecret=[Facebook app secret]
# twitter
spring.social.twitter.consumerKey=i0djqsfBiZpt6KSHU4cVqg6ut
spring.social.twitter.consumerSecret=N4DX8zzhzfHQiynymrHM3QwXnFFoVbwCeojlvb7UvA2Unav0aA


# cf. https://code.chamo.de/2017/04/21/spring-boot-jpa-encoding-data-sql/
spring.datasource.sqlScriptEncoding=UTF-8
# L'URL de la source de donn\u00c3\u00a9es :SGBD H2 en m\u00c3\u00a9moire vive
spring.datasource.url=jdbc:h2:mem:testdb
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
# On recr\u00c3\u00a9e automatiquement le sch\u00c3\u00a9ma relationnel \u00c3\u00a0 partir des annotations JPA
spring.jpa.hibernate.ddl-auto=create-drop
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

spring.messages.basename=validation

server.error.whitelabel.enabled=true

# La console H2 est activ\u00c3\u00a9e automatiquement si on utilise Spring Boot Dev Tools
#spring.h2.console.enabled=true
# L'URL par d\u00c3\u00a9faut de la console H2, customisable
#spring.h2.console.path=/h2-console


spring.data.rest.defaultMediaType=application/json
# Pour g\u00c3\u00a9n\u00c3\u00a9rer du joli JSON
spring.jackson.serialization.indent-output=true

# L'API REST est expos\u00c3\u00a9e \u00c3\u00a0 l'url http://localhost:8080/api
spring.data.rest.base-path=api

logging.level.web=DEBUG
# Montrer le d\u00c3\u00a9tail des param\u00c3\u00a8tres HTTP transmis dans les logs
spring.mvc.log-request-details=true

# cf. https://www.baeldung.com/sql-logging-spring-boot
# Configuration des logs SQL JPA
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.pattern.console=%clr(%-5p)  %cyan(%logger{15}) - %msg %n

#Envoi d'un email
logging.level.org.springframework.mail=DEBUG
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=legac.etest@gmail.com
spring.mail.password=TestamentHair
# Other properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true
# SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port = 465
#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
# References
# https://www.mkyong.com/java/javamail-api-sending-email-via-gmail-smtp-example/